---
- hosts: default

  remote_user: '{{ rem_usr }}'

  vars:
    ansible_ssh_private_key_file: '{{ id_file }}'
    custom_ansible_lib_dir: '../../lib/ansible-tasks'

  tasks:
    - name: 'Bootstrapping the Kubernetes Control Plane: set facts'
      set_fact:
        playbook_title: 'Bootstrapping the Kubernetes Control Plane'
        kube_binaries:
          - 'kube-apiserver'
          - 'kube-controller-manager'
          - 'kube-scheduler'
          - 'kubectl'
        kube_services:
          - 'kube-apiserver'
          - 'kube-controller-manager'
          - 'kube-scheduler'

    - name: '{{ playbook_title }}: create {{ item }} dir'
      become: yes
      ansible.builtin.file:
        path: '{{ item }}'
        state: directory
      loop:
        - '/etc/kubernetes/config'

    - name: '{{ playbook_title }}: download {{ item }} binary'
      get_url:
        url: 'https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/{{ item }}'
        dest: '/usr/local/bin/{{ item }}'
        mode: '0755'
      loop: '{{ kube_binaries }}'

    - name: '{{ playbook_title }}: configure the Kubernetes API server, create {{ item }} dir'
      become: yes
      ansible.builtin.file:
        path: '{{ item }}'
        state: directory
      loop:
        - '/var/lib/kubernetes/'

    - name: '{{ playbook_title }}: configure the Kubernetes API server, copy PEMs'
      become: yes
      ansible.builtin.copy:
        src: '{{ certs_path }}/{{ item }}'
        dest: '/var/lib/kubernetes/'
      loop:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
        - service-account-key.pem
        - service-account.pem

    - name: '{{ playbook_title }}: configure the Kubernetes API server, copy config'
      become: yes
      ansible.builtin.copy:
        src: '{{ config_auto_gen_path }}/{{ item }}'
        dest: '/var/lib/kubernetes/'
      loop:
        - encryption-config.yaml

    - name: '{{ playbook_title }}: configure the Kubernetes API server, create service file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/systemd/system/kube-apiserver.service'
        mode: '0644'
        content: |
          [Unit]
          Description=Kubernetes API Server
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-apiserver \
            --advertise-address={{ internal_ip }} \
            --allow-privileged=true \
            --apiserver-count=3 \
            --audit-log-maxage=30 \
            --audit-log-maxbackup=3 \
            --audit-log-maxsize=100 \
            --audit-log-path=/var/log/audit.log \
            --authorization-mode=Node,RBAC \
            --bind-address=0.0.0.0 \
            --client-ca-file=/var/lib/kubernetes/ca.pem \
            --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
            --etcd-cafile=/var/lib/kubernetes/ca.pem \
            --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
            --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
            --etcd-servers=https://{{ internal_ip }}:2379 \
            --event-ttl=1h \
            --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
            --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
            --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
            --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
            --runtime-config='api/all=true' \
            --service-account-key-file=/var/lib/kubernetes/service-account.pem \
            --service-account-signing-key-file=/var/lib/kubernetes/service-account-key.pem \
            --service-account-issuer=https://{{ kubernetes_public_address }}:{{ kube_apiserver_port }} \
            --service-cluster-ip-range={{ service_cluster_ip_range }} \
            --service-node-port-range=30000-32767 \
            --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
            --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: '{{ playbook_title }}: configure the Kubernetes Controller Manager, copy config'
      become: yes
      ansible.builtin.copy:
        src: '{{ config_auto_gen_path }}/{{ item }}'
        dest: '/var/lib/kubernetes/'
      loop:
        - kube-controller-manager.kubeconfig

    - name: '{{ playbook_title }}: configure the Kubernetes Controller Manager, create service file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/systemd/system/kube-controller-manager.service'
        mode: '0644'
        content: |
          [Unit]
          Description=Kubernetes Controller Manager
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-controller-manager \
            --bind-address=0.0.0.0 \
            --cluster-cidr={{ pod_cidr_block }} \
            --cluster-name=kubernetes \
            --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \
            --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \
            --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \
            --leader-elect=true \
            --root-ca-file=/var/lib/kubernetes/ca.pem \
            --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \
            --service-cluster-ip-range={{ service_cluster_ip_range }} \
            --use-service-account-credentials=true \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: '{{ playbook_title }}: configure the Kubernetes Scheduler, copy config'
      become: yes
      ansible.builtin.copy:
        src: '{{ config_auto_gen_path }}/{{ item }}'
        dest: '/var/lib/kubernetes/'
      loop:
        - kube-scheduler.kubeconfig

    - name: '{{ playbook_title }}: configure the Kubernetes Scheduler, create config file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/kubernetes/config/kube-scheduler.yaml'
        mode: '0644'
        content: |
          apiVersion: kubescheduler.config.k8s.io/v1beta1
          kind: KubeSchedulerConfiguration
          clientConnection:
            kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
          leaderElection:
            leaderElect: true

    - name: '{{ playbook_title }}: configure the Kubernetes Scheduler, create service file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/systemd/system/kube-scheduler.service'
        mode: '0644'
        content: |
          [Unit]
          Description=Kubernetes Scheduler
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-scheduler \
            --config=/etc/kubernetes/config/kube-scheduler.yaml \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: '{{ playbook_title }}: {{ item }} Kubernetes services'
      become: yes
      ansible.builtin.command:
        argv: "{{ ['/usr/bin/systemctl', item] + kube_services }}"
      loop:
        - stop
        - enable
        - start

    - name: '{{ playbook_title }}: enable HTTP health checks, install nginx'
      become: yes
      apt:
        pkg:
          - nginx
        install_recommends: no

    - name: '{{ playbook_title }}: enable HTTP health checks, create site file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/nginx/sites-available/default'
        mode: '0644'
        content: |
          server {
            listen      80 default_server;
            server_name _;

            location /healthz {
               proxy_pass                    https://127.0.0.1:{{ kube_apiserver_port }}/healthz;
               proxy_ssl_trusted_certificate /var/lib/kubernetes/ca.pem;
            }
          }

    - name: '{{ playbook_title }}: enable HTTP health checks, create a symbolic link to site enabled'
      become: yes
      ansible.builtin.file:
        src: '/etc/nginx/sites-available/default'
        dest: '/etc/nginx/sites-enabled/default'
        force: yes
        state: link

    - name: '{{ playbook_title }}: enable HTTP health checks, {{ item }} nginx'
      become: yes
      ansible.builtin.command:
        argv:
          - /usr/bin/systemctl
          - '{{ item }}'
          - nginx
      loop:
        - stop
        - enable
        - start

    - name: '{{ playbook_title }}: verification cluster info, copy {{ item }}'
      become: yes
      ansible.builtin.copy:
        src: '{{ config_auto_gen_path }}/{{ item }}'
        dest: '/home/{{ ansible_user_id }}'
      loop:
        - admin.kubeconfig

    - name: '{{ playbook_title }}: verification cluster info, command'
      ansible.builtin.command:
        argv:
          - /usr/local/bin/kubectl
          - cluster-info
          - --kubeconfig
          - '/home/{{ ansible_user_id }}/admin.kubeconfig'
      register: result

    - name: '{{ playbook_title }}: verification cluster info, result'
      debug:
        msg: '{{ result.stdout }}'

    - debug:
        msg: '... expected output: "Kubernetes control plane is running at https://127.0.0.1:6443"'

    - name: '{{ playbook_title }}: verification health check, command'
      ansible.builtin.command:
        argv:
          - curl
          - -H
          - 'Host: kubernetes.default.svc.cluster.local'
          - -i
          - http://127.0.0.1/healthz
      register: result

    - name: '{{ playbook_title }}: verification health check, result'
      debug:
        msg: '{{ result.stdout }}'

    - debug:
        msg: |
          HTTP/1.1 200 OK
          Server: nginx/1.18.0 (Ubuntu)
          Date: Sun, 02 May 2021 04:19:29 GMT
          Content-Type: text/plain; charset=utf-8
          Content-Length: 2
          Connection: keep-alive
          Cache-Control: no-cache, private
          X-Content-Type-Options: nosniff
          X-Kubernetes-Pf-Flowschema-Uid: c43f32eb-e038-457f-9474-571d43e5c325
          X-Kubernetes-Pf-Prioritylevel-Uid: 8ba5908f-5569-4330-80fd-c643e7512366

          ok

    - name: '{{ playbook_title }}: unset facts'
      set_fact:
        playbook_title:
        kube_binaries:
        kube_services:
