---
- hosts: default

  remote_user: '{{ rem_usr }}'

  vars:
    ansible_ssh_private_key_file: '{{ id_file }}'
    custom_ansible_lib_dir: '../../lib/ansible-tasks'

  tasks:
    - name: 'Provisioning a Kubernetes Worker Node: set facts'
      set_fact:
        playbook_title: 'Provisioning a Kubernetes Worker Node'
        dns_servers: ['208.67.222.222', '208.67.220.220']
        kube_worker_services:
          - kubelet
          - kube-proxy

    - import_tasks: '{{ custom_ansible_lib_dir }}/init.yml'

    - name: '{{ playbook_title }}: install packages'
      become: yes
      apt:
        pkg:
          - socat
          - conntrack
          - ipset
        install_recommends: no

    - name: '{{ playbook_title }}: turn off swap'
      become: yes
      ansible.builtin.command:
        argv:
          - swapoff
          - -a

    - name: '{{ playbook_title }}: create directories'
      become: yes
      ansible.builtin.file:
        path: '{{ item }}'
        state: directory
      loop:
        - '/etc/cni/net.d'
        - '/opt/cni/bin'
        - '/var/lib/kubelet'
        - '/var/lib/kube-proxy'
        - '/var/lib/kubernetes'
        - '/var/run/kubernetes'
        - '/etc/containerd/'

    - name: '{{ playbook_title }}: download files'
      become: yes
      get_url:
        url: 'https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/{{ item }}'
        dest: '/usr/local/bin/{{ item }}'
        mode: '0755'
      loop:
          - 'kubectl'
          - 'kube-proxy'
          - 'kubelet'

    - name: '{{ playbook_title }}: download files'
      become: yes
      get_url:
        url: 'https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64'
        dest: '/usr/local/bin/runc'
        mode: '0755'

    - name: '{{ playbook_title }}: download files'
      become: yes
      ansible.builtin.unarchive:
        src: 'https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz'
        dest: '/usr/local/bin/'
        mode: '0755'
        remote_src: yes

    - name: '{{ playbook_title }}: download files'
      become: yes
      ansible.builtin.unarchive:
        src: 'https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz'
        dest: '/opt/cni/bin'
        remote_src: yes

    - name: '{{ playbook_title }}: download files'
      ansible.builtin.unarchive:
        src: 'https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz'
        dest: '{{ home_path }}'
        remote_src: yes

    - name: '{{ playbook_title }}: copy files to bin'
      become: yes
      ansible.builtin.copy:
        src: '{{ home_path }}/bin/{{ item }}'
        dest: '/bin'
        mode: '0755'
        remote_src: yes
      loop:
        - containerd
        - containerd-shim
        - containerd-shim-runc-v1
        - containerd-shim-runc-v2
        - ctr

    - name: '{{ playbook_title }}: configure CNI networking'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/cni/net.d/10-bridge.conf'
        mode: '0644'
        content: |
          {
              "cniVersion": "0.4.0",
              "name": "bridge",
              "type": "bridge",
              "bridge": "cnio0",
              "isGateway": true,
              "ipMasq": true,
              "ipam": {
                  "type": "host-local",
                  "ranges": [
                    [{"subnet": "{{ pod_cidr }}"}]
                  ],
                  "routes": [{"dst": "0.0.0.0/0"}]
              }
          }

    - name: '{{ playbook_title }}: configure CNI networking, loopback'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/cni/net.d/99-loopback.conf'
        mode: '0644'
        content: |
          {
              "cniVersion": "0.4.0",
              "name": "lo",
              "type": "loopback"
          }

    - name: '{{ playbook_title }}: configure containerd'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/containerd/config.toml'
        mode: '0644'
        content: |
          [plugins]
            [plugins.cri.containerd]
              snapshotter = "overlayfs"
              [plugins.cri.containerd.default_runtime]
                runtime_type = "io.containerd.runtime.v1.linux"
                runtime_engine = "/usr/local/bin/runc"
                runtime_root = ""

    - name: '{{ playbook_title }}: configure containerd, service'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/systemd/system/containerd.service'
        mode: '0644'
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target

          [Service]
          ExecStartPre=/sbin/modprobe overlay
          ExecStart=/bin/containerd
          Restart=always
          RestartSec=5
          Delegate=yes
          KillMode=process
          OOMScoreAdjust=-999
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity

          [Install]
          WantedBy=multi-user.target

    - name: '{{ playbook_title }}: configure the Kubelet, copy PEMs and config files'
      become: yes
      ansible.builtin.copy:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
      loop:
        - { src: '{{ certs_path }}/{{ instance_name }}-key.pem', dest: '/var/lib/kubelet/' }
        - { src: '{{ certs_path }}/{{ instance_name }}.pem', dest: '/var/lib/kubelet/' }
        - { src: '{{ config_auto_gen_path }}/{{ instance_name }}.kubeconfig', dest: '/var/lib/kubelet/kubeconfig' }
        - { src: '{{ certs_path }}/ca.pem', dest: '/var/lib/kubernetes/' }

    - name: '{{ playbook_title }}: configure the Kubelet, create config file'
      become: yes
      ansible.builtin.copy:
        dest: '/var/lib/kubelet/kubelet-config.yaml'
        mode: '0644'
        content: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "/var/lib/kubernetes/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "cluster.local"
          clusterDNS:
            - "10.32.0.10"
          podCIDR: "{{ pod_cidr }}"
          resolvConf: "/run/systemd/resolve/resolv.conf"
          runtimeRequestTimeout: "15m"
          tlsCertFile: "/var/lib/kubelet/{{ instance_name }}.pem"
          tlsPrivateKeyFile: "/var/lib/kubelet/{{ instance_name }}-key.pem"

    - name: '{{ playbook_title }}: configure the Kubelet, create service file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/systemd/system/kubelet.service'
        mode: '0644'
        content: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=containerd.service
          Requires=containerd.service

          [Service]
          ExecStart=/usr/local/bin/kubelet \
            --config=/var/lib/kubelet/kubelet-config.yaml \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \
            --image-pull-progress-deadline=2m \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --network-plugin=cni \
            --register-node=true \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: '{{ playbook_title }}: configure the Kubelet, copy PEMs and config files'
      become: yes
      ansible.builtin.copy:
        src: '{{ config_auto_gen_path }}/kube-proxy.kubeconfig'
        dest: '/var/lib/kube-proxy/kubeconfig'

    - name: '{{ playbook_title }}: configure the Kubernetes proxy, create config file'
      become: yes
      ansible.builtin.copy:
        dest: '/var/lib/kube-proxy/kube-proxy-config.yaml'
        mode: '0644'
        content: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: "/var/lib/kube-proxy/kubeconfig"
          mode: "iptables"
          clusterCIDR: "{{ pod_cidr_block }}"

    - name: '{{ playbook_title }}: configure the Kubernetes proxy, create service file'
      become: yes
      ansible.builtin.copy:
        dest: '/etc/systemd/system/kube-proxy.service'
        mode: '0644'
        content: |
          [Unit]
          Description=Kubernetes Kube Proxy
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-proxy \
            --config=/var/lib/kube-proxy/kube-proxy-config.yaml
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: '{{ playbook_title }}: set up Kubernetes services, daemon reload'
      become: yes
      ansible.builtin.command:
        argv:
          - /usr/bin/systemctl
          - daemon-reload
      # when: TODO => service file is changed

    - name: '{{ playbook_title }}: set up Kubernetes services'
      become: yes
      ansible.builtin.command:
        argv: "{{ ['/usr/bin/systemctl', item] + kube_worker_services }}"
      loop:
        - stop
        - enable
        - start
      # when: TODO => service file is changed

    - name: '{{ playbook_title }}: unset facts'
      set_fact:
        playbook_title:
        kube_worker_services:

  handlers:
  - name: restart-ssh
    become: yes
    service:
      name: ssh
      state: restarted
